/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FastHandsService_H
#define FastHandsService_H

#include <thrift/TDispatchProcessor.h>
#include "FastHandsService_types.h"

namespace fasthands {

class FastHandsServiceIf {
 public:
  virtual ~FastHandsServiceIf() {}
  virtual int32_t put(const int32_t key, const std::string& value) = 0;
  virtual void get(std::string& _return, const int32_t key) = 0;
  virtual void bitAnd(std::vector<int32_t> & _return, const std::vector<int32_t> & keys) = 0;
};

class FastHandsServiceIfFactory {
 public:
  typedef FastHandsServiceIf Handler;

  virtual ~FastHandsServiceIfFactory() {}

  virtual FastHandsServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FastHandsServiceIf* /* handler */) = 0;
};

class FastHandsServiceIfSingletonFactory : virtual public FastHandsServiceIfFactory {
 public:
  FastHandsServiceIfSingletonFactory(const boost::shared_ptr<FastHandsServiceIf>& iface) : iface_(iface) {}
  virtual ~FastHandsServiceIfSingletonFactory() {}

  virtual FastHandsServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FastHandsServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<FastHandsServiceIf> iface_;
};

class FastHandsServiceNull : virtual public FastHandsServiceIf {
 public:
  virtual ~FastHandsServiceNull() {}
  int32_t put(const int32_t /* key */, const std::string& /* value */) {
    int32_t _return = 0;
    return _return;
  }
  void get(std::string& /* _return */, const int32_t /* key */) {
    return;
  }
  void bitAnd(std::vector<int32_t> & /* _return */, const std::vector<int32_t> & /* keys */) {
    return;
  }
};

typedef struct _FastHandsService_put_args__isset {
  _FastHandsService_put_args__isset() : key(false), value(false) {}
  bool key;
  bool value;
} _FastHandsService_put_args__isset;

class FastHandsService_put_args {
 public:

  FastHandsService_put_args() : key(0), value() {
  }

  virtual ~FastHandsService_put_args() throw() {}

  int32_t key;
  std::string value;

  _FastHandsService_put_args__isset __isset;

  void __set_key(const int32_t val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const FastHandsService_put_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const FastHandsService_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FastHandsService_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FastHandsService_put_pargs {
 public:


  virtual ~FastHandsService_put_pargs() throw() {}

  const int32_t* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FastHandsService_put_result__isset {
  _FastHandsService_put_result__isset() : success(false) {}
  bool success;
} _FastHandsService_put_result__isset;

class FastHandsService_put_result {
 public:

  FastHandsService_put_result() : success(0) {
  }

  virtual ~FastHandsService_put_result() throw() {}

  int32_t success;

  _FastHandsService_put_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const FastHandsService_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FastHandsService_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FastHandsService_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FastHandsService_put_presult__isset {
  _FastHandsService_put_presult__isset() : success(false) {}
  bool success;
} _FastHandsService_put_presult__isset;

class FastHandsService_put_presult {
 public:


  virtual ~FastHandsService_put_presult() throw() {}

  int32_t* success;

  _FastHandsService_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FastHandsService_get_args__isset {
  _FastHandsService_get_args__isset() : key(false) {}
  bool key;
} _FastHandsService_get_args__isset;

class FastHandsService_get_args {
 public:

  FastHandsService_get_args() : key(0) {
  }

  virtual ~FastHandsService_get_args() throw() {}

  int32_t key;

  _FastHandsService_get_args__isset __isset;

  void __set_key(const int32_t val) {
    key = val;
  }

  bool operator == (const FastHandsService_get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const FastHandsService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FastHandsService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FastHandsService_get_pargs {
 public:


  virtual ~FastHandsService_get_pargs() throw() {}

  const int32_t* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FastHandsService_get_result__isset {
  _FastHandsService_get_result__isset() : success(false) {}
  bool success;
} _FastHandsService_get_result__isset;

class FastHandsService_get_result {
 public:

  FastHandsService_get_result() : success() {
  }

  virtual ~FastHandsService_get_result() throw() {}

  std::string success;

  _FastHandsService_get_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const FastHandsService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FastHandsService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FastHandsService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FastHandsService_get_presult__isset {
  _FastHandsService_get_presult__isset() : success(false) {}
  bool success;
} _FastHandsService_get_presult__isset;

class FastHandsService_get_presult {
 public:


  virtual ~FastHandsService_get_presult() throw() {}

  std::string* success;

  _FastHandsService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FastHandsService_bitAnd_args__isset {
  _FastHandsService_bitAnd_args__isset() : keys(false) {}
  bool keys;
} _FastHandsService_bitAnd_args__isset;

class FastHandsService_bitAnd_args {
 public:

  FastHandsService_bitAnd_args() {
  }

  virtual ~FastHandsService_bitAnd_args() throw() {}

  std::vector<int32_t>  keys;

  _FastHandsService_bitAnd_args__isset __isset;

  void __set_keys(const std::vector<int32_t> & val) {
    keys = val;
  }

  bool operator == (const FastHandsService_bitAnd_args & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const FastHandsService_bitAnd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FastHandsService_bitAnd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FastHandsService_bitAnd_pargs {
 public:


  virtual ~FastHandsService_bitAnd_pargs() throw() {}

  const std::vector<int32_t> * keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FastHandsService_bitAnd_result__isset {
  _FastHandsService_bitAnd_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _FastHandsService_bitAnd_result__isset;

class FastHandsService_bitAnd_result {
 public:

  FastHandsService_bitAnd_result() {
  }

  virtual ~FastHandsService_bitAnd_result() throw() {}

  std::vector<int32_t>  success;
  InvalidOperation ouch;

  _FastHandsService_bitAnd_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val) {
    success = val;
  }

  void __set_ouch(const InvalidOperation& val) {
    ouch = val;
  }

  bool operator == (const FastHandsService_bitAnd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const FastHandsService_bitAnd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FastHandsService_bitAnd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FastHandsService_bitAnd_presult__isset {
  _FastHandsService_bitAnd_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _FastHandsService_bitAnd_presult__isset;

class FastHandsService_bitAnd_presult {
 public:


  virtual ~FastHandsService_bitAnd_presult() throw() {}

  std::vector<int32_t> * success;
  InvalidOperation ouch;

  _FastHandsService_bitAnd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FastHandsServiceClient : virtual public FastHandsServiceIf {
 public:
  FastHandsServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  FastHandsServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t put(const int32_t key, const std::string& value);
  void send_put(const int32_t key, const std::string& value);
  int32_t recv_put();
  void get(std::string& _return, const int32_t key);
  void send_get(const int32_t key);
  void recv_get(std::string& _return);
  void bitAnd(std::vector<int32_t> & _return, const std::vector<int32_t> & keys);
  void send_bitAnd(const std::vector<int32_t> & keys);
  void recv_bitAnd(std::vector<int32_t> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FastHandsServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<FastHandsServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FastHandsServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bitAnd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FastHandsServiceProcessor(boost::shared_ptr<FastHandsServiceIf> iface) :
    iface_(iface) {
    processMap_["put"] = &FastHandsServiceProcessor::process_put;
    processMap_["get"] = &FastHandsServiceProcessor::process_get;
    processMap_["bitAnd"] = &FastHandsServiceProcessor::process_bitAnd;
  }

  virtual ~FastHandsServiceProcessor() {}
};

class FastHandsServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FastHandsServiceProcessorFactory(const ::boost::shared_ptr< FastHandsServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FastHandsServiceIfFactory > handlerFactory_;
};

class FastHandsServiceMultiface : virtual public FastHandsServiceIf {
 public:
  FastHandsServiceMultiface(std::vector<boost::shared_ptr<FastHandsServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FastHandsServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FastHandsServiceIf> > ifaces_;
  FastHandsServiceMultiface() {}
  void add(boost::shared_ptr<FastHandsServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t put(const int32_t key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(key, value);
    }
    return ifaces_[i]->put(key, value);
  }

  void get(std::string& _return, const int32_t key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, key);
    }
    ifaces_[i]->get(_return, key);
    return;
  }

  void bitAnd(std::vector<int32_t> & _return, const std::vector<int32_t> & keys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bitAnd(_return, keys);
    }
    ifaces_[i]->bitAnd(_return, keys);
    return;
  }

};

} // namespace

#endif
